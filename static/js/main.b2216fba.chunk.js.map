{"version":3,"sources":["rat.png","cheese.png","ratinmaze.png","Cell.js","Path.js","Maze.js","index.js"],"names":["useStyles1","makeStyles","paper","background","useStyles2","WhiteCell","Grid","item","Paper","elevation","Box","padding","height","width","RedCell","classes","className","GreenCell","Cell","props","N","Path","pathIdx","foundPath","createFoundPath","i","push","j","maze","k","currentPath","length","x","y","findColor","result","printOnConsole","console","log","this","class","container","spacing","justify","direction","style","src","rat","vertical-align","cheese","React","Component","Maze","matrix","paths","idx","numPaths","index","path","generateMatrix","val","Math","floor","random","inMaze","visited","calculatePaths","mazeUtil","pop","getNumPaths","color","findPaths","displayNumPaths","ReactDOM","render","document","getElementById","grids","solution","id","d","createElement","space","appendChild","handleClick","e","preventDefault","window","location","reload","Array","Button","onClick","margin","element"],"mappings":"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","file":"static/js/main.b2216fba.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rat.4658acee.png\";","export default __webpack_public_path__ + \"static/media/cheese.1aa54fee.png\";","export default __webpack_public_path__ + \"static/media/ratinmaze.1603c73e.png\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport './index.css';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\n\r\nconst styles1 = {\r\n    paper: {\r\n      background: \"#4CAF50\",\r\n    }\r\n};\r\n  \r\nconst styles2 = {\r\n    paper: {\r\n      background: \"#FF5757\",\r\n    }\r\n};\r\n\r\nconst useStyles1 = makeStyles(styles1);\r\nconst useStyles2 = makeStyles(styles2);\r\n\r\nfunction Cell(props) { \r\n    if(props.N == 0) {\r\n      return(<RedCell></RedCell>);      \r\n    }\r\n  \r\n    else if(props.N == 1) {\r\n      return(<GreenCell></GreenCell>)\r\n    }\r\n  \r\n    else {\r\n      return(<WhiteCell></WhiteCell>);\r\n    }      \r\n}\r\n  \r\nfunction WhiteCell() {\r\n  return (\r\n    <Grid item>\r\n    <Paper elevation={3}>\r\n      <Box padding={2} height={50} width = {50} >              \r\n                  \r\n      </Box>\r\n    </Paper> \r\n    </Grid>    \r\n    );\r\n}\r\n  \r\nfunction RedCell() {\r\n  const classes = useStyles2();\r\n      return (\r\n          <Grid item>\r\n          <Paper className={classes.paper} elevation={3}>\r\n            <Box padding={2} height={50} width = {50} >                       \r\n            </Box>\r\n          </Paper> \r\n          </Grid>    \r\n      );\r\n}\r\n  \r\nfunction GreenCell() {\r\n    const classes = useStyles1();\r\n        return (\r\n            <Grid item>\r\n            <Paper className={classes.paper} elevation={3}>\r\n              <Box padding={2} height={50} width = {50} >                       \r\n              </Box>\r\n            </Paper> \r\n            </Grid>    \r\n        );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport rat from './rat.png';\r\nimport ratinmaze from './ratinmaze.png';\r\nimport cheese from './cheese.png';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport './index.css';\r\nimport Cell from './Cell';\r\nimport { render } from '@testing-library/react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\n\r\nclass Path extends React.Component {\r\n    constructor(props)\r\n    {\r\n      super(props);\r\n    }\r\n  \r\n    pathIdx = 0;\r\n    foundPath = [];\r\n  \r\n    createFoundPath = () => {\r\n      for(let i=0; i<16; i++) {\r\n        this.foundPath.push(0);\r\n      }\r\n  \r\n      for(let j=0; j<16; j++) {\r\n        if(this.props.maze[j] == 0) {\r\n          this.foundPath[j] = 2;\r\n          //console.log(\"Red cell at \" + j);\r\n        }\r\n      }\r\n  \r\n      for(let k=0; k<this.props.currentPath.length; k++) {\r\n        let x = this.props.currentPath[k][0];\r\n        let y = this.props.currentPath[k][1];\r\n  \r\n        this.foundPath[4*x + y] = 1;\r\n      }\r\n    }\r\n  \r\n    findColor = () => {\r\n      this.pathIdx += 1;\r\n      let result = this.foundPath[this.pathIdx];\r\n      if(result == 2) {\r\n        result = 0}\r\n      else if(result == 0) {result = 2};\r\n  \r\n      if(this.pathIdx == 14) {this.pathIdx = 0}\r\n      return result; \r\n    }\r\n  \r\n    printOnConsole = () => {\r\n      for(let i=0; i<16; i++) {\r\n        console.log(i + \" \" + this.props.currentPath[i]);\r\n      }\r\n    }\r\n  \r\n    render () {\r\n      this.createFoundPath();\r\n      this.printOnConsole();\r\n      return (\r\n        <span class=\"path\">\r\n        <br></br>  \r\n         <Grid container spacing = {2} justify=\"center\" direction=\"column\">\r\n           <p>\r\n            <Grid container spacing = {1} justify=\"center\" direction=\"row\">\r\n            <Grid item>\r\n            <Paper style={{background: \"#4CAF50\"}} elevation={3}>\r\n              <Box padding={2} height={50} width = {50}>\r\n                <center>\r\n                <img src={rat} height={75} width={75} vertical-align=\"middle\"></img>\r\n                </center>\r\n              </Box>\r\n            </Paper> \r\n            </Grid>\r\n            <Cell N={this.findColor()}></Cell> \r\n            <Cell N={this.findColor()}></Cell> \r\n            <Cell N={this.findColor()}></Cell>\r\n            </Grid>\r\n            </p>\r\n  \r\n            <p>        \r\n            <Grid container spacing = {1} justify=\"center\" direction=\"row\">\r\n            <Cell N={this.findColor()}></Cell>\r\n            <Cell N={this.findColor()}></Cell>\r\n            <Cell N={this.findColor()}></Cell> \r\n            <Cell N={this.findColor()}></Cell>\r\n            </Grid></p>\r\n  \r\n            <p>\r\n            <Grid container spacing = {1} justify=\"center\" direction=\"row\">\r\n            <Cell N={this.findColor()}></Cell>\r\n            <Cell N={this.findColor()}></Cell>\r\n            <Cell N={this.findColor()}></Cell> \r\n            <Cell N={this.findColor()}></Cell>\r\n            </Grid>\r\n            </p>\r\n  \r\n            <p>\r\n            <Grid container spacing = {1} justify=\"center\" direction=\"row\">\r\n            <Cell N={this.findColor()}></Cell>\r\n            <Cell N={this.findColor()}></Cell>\r\n            <Cell N={this.findColor()}></Cell> \r\n            <Grid item>\r\n            <Paper style={{background: \"#4CAF50\"}} elevation={3}>\r\n              <Box padding={2} height={50} width = {50}>\r\n                <center>\r\n                <img src={cheese} height={70} width={70} vertical-align=\"middle\"></img>\r\n                </center>\r\n              </Box>\r\n            </Paper> \r\n            </Grid>\r\n            </Grid></p> \r\n          </Grid>     \r\n        </span> \r\n      );    \r\n    }\r\n}\r\n\r\nexport default Path;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport rat from './rat.png';\r\nimport ratinmaze from './ratinmaze.png';\r\nimport cheese from './cheese.png';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport './index.css';\r\nimport Cell from './Cell';\r\nimport Path from './Path';\r\nimport { render } from '@testing-library/react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\n\r\nclass Maze extends React.Component {\r\n    matrix = [2];\r\n    paths = [];\r\n    idx = 0;\r\n    numPaths = 0;\r\n    pathIdx = 0;\r\n    \r\n    index = () => {\r\n      this.idx += 1;\r\n      return this.matrix[this.idx];           \r\n    }\r\n  \r\n    findColor = (path) => {\r\n      this.pathIdx += 1;\r\n      let result = path[this.pathIdx];\r\n      if(this.pathIdx == 14) {this.pathIdx = 0}\r\n      return result; \r\n    }\r\n  \r\n    generateMatrix = () => {\r\n      for(let i=0; i<14; i++)\r\n      {\r\n        let val = Math.floor(Math.random()*4);\r\n        console.log(val);\r\n        if(val == 0) {\r\n          this.matrix.push(0);    \r\n        }\r\n  \r\n        else {\r\n          this.matrix.push(2);\r\n        }\r\n      }\r\n      this.matrix.push(2);\r\n      console.log(this.matrix.length); \r\n    }\r\n  \r\n    inMaze = (x, y, visited) =>  {\r\n      // if cell is valid return true\r\n      return (x >= 0 && x < 4 && y >= 0  && y < 4 && this.matrix[x*4 + y] > 0 && visited[x*4 + y] == 0);\r\n    }\r\n  \r\n    \r\n    calculatePaths = () =>{\r\n      //let paths = [];\r\n      let visited = [];\r\n      for(let i=0; i<16; i++)\r\n      {\r\n        visited[i] = 0;\r\n      }\r\n  \r\n      this.mazeUtil(visited, 0, 0, []);\r\n      console.log(this.numPaths);\r\n      console.log(this.paths);\r\n      return this.paths;\r\n    }\r\n  \r\n    mazeUtil = (visited, x, y, currentPath) => {\r\n      if(x == 3 && y == 3) {\r\n        this.numPaths += 1;\r\n        this.paths.push([...currentPath]);\r\n        visited[15] = 0;    \r\n        return;\r\n      }\r\n  \r\n      if(!this.inMaze(x, y, visited)) {\r\n        return;\r\n      }\r\n  \r\n      visited[4*x + y] = 1;\r\n  \r\n      // currentPath.push([x-1, y])\r\n      // this.mazeUtil(visited, x-1, y, currentPath);\r\n      // currentPath.pop();\r\n  \r\n      currentPath.push([x+1, y]);\r\n      this.mazeUtil(visited, x+1, y, currentPath);\r\n      currentPath.pop();\r\n  \r\n      // currentPath.push([x, y-1]);\r\n      // this.mazeUtil(visited, x, y-1, currentPath);\r\n      // currentPath.pop();\r\n  \r\n      currentPath.push([x, y+1]);\r\n      this.mazeUtil(visited, x, y+1, currentPath);\r\n      currentPath.pop();\r\n  \r\n      visited[4*x + y] = 0;    \r\n      return;\r\n    }\r\n  \r\n    getNumPaths = () => {\r\n      return (\r\n        <div style={{color: \"white\"}}><center><b>\r\n          Total Paths = {this.numPaths} </b> </center>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    findPaths = () => {\r\n      const displayNumPaths = <this.getNumPaths></this.getNumPaths>;\r\n      ReactDOM.render(displayNumPaths, document.getElementById(\"count\"));\r\n      let grids = document.getElementById(\"routes\");       \r\n  \r\n      for(let i=0; i<this.paths.length; i++)\r\n      {\r\n        const solution = <Path currentPath = {this.paths[i]} maze = {this.matrix}></Path>\r\n        const id = Math.random()\r\n        const d = document.createElement(\"span\")\r\n        d.id = id;\r\n        const space = document.createElement(\"br\")\r\n        grids.appendChild(d);\r\n        grids.appendChild(space);\r\n        ReactDOM.render(solution, document.getElementById(id));\r\n      }\r\n      //document.body.appendChild(grid);\r\n      //ReactDOM.render(grid, document.getElementById(\"routes\"));\r\n    }\r\n  \r\n    handleClick = (e) => {\r\n      e.preventDefault();\r\n      window.location.reload(false);\r\n      console.log('The link was clicked.');\r\n    } \r\n    \r\n    render() {\r\n      this.matrix = new Array();\r\n      this.matrix = [2];\r\n      this.generateMatrix();\r\n      this.calculatePaths();\r\n      \r\n      return (\r\n        <span class=\"maze\" ><center>\r\n        <h1>Rat in a Maze</h1> \r\n        <div id=\"text\">\r\n          This web app brings to life the famous rat in a maze problem. \r\n          It visualizes all the possible paths a rat can take in a square maze with fixed obstacles.\r\n          There is a given maze of size N x N. The source and the destination location is top-left cell and bottom right cell respectively. Some cells are valid to move and some cells are blocked.\r\n          The rat can take only one step to the right or down at a time. \r\n          If the rat starts moving from start vertex to destination vertex, we have to find if the rat can reach the destination, \r\n          if it is possible then the correct paths for the rat are marked. \r\n          </div>\r\n        </center>\r\n        <br></br>      \r\n         <Grid container spacing = {2} justify=\"center\" direction=\"column\">\r\n           <p>\r\n            <Grid container spacing = {1} justify=\"center\" direction=\"row\">\r\n            <Grid item>\r\n            <Paper elevation={3}>\r\n              <Box padding={2} height={50} width = {50}>\r\n                <center>\r\n                <img src={rat} height={75} width={75} vertical-align=\"middle\"></img>\r\n                </center>\r\n              </Box>\r\n            </Paper> \r\n            </Grid>\r\n            <Cell N={this.index()}></Cell> \r\n            <Cell N={this.index()}></Cell> \r\n            <Cell N={this.index()}></Cell>\r\n            </Grid>\r\n            </p>\r\n  \r\n            <p>        \r\n            <Grid container spacing = {1} justify=\"center\" direction=\"row\">\r\n            <Cell N={this.index()}></Cell>\r\n            <Cell N={this.index()}></Cell>\r\n            <Cell N={this.index()}></Cell> \r\n            <Cell N={this.index()}></Cell>\r\n            </Grid></p>\r\n  \r\n            <p>\r\n            <Grid container spacing = {1} justify=\"center\" direction=\"row\">\r\n            <Cell N={this.index()}></Cell>\r\n            <Cell N={this.index()}></Cell>\r\n            <Cell N={this.index()}></Cell> \r\n            <Cell N={this.index()}></Cell>\r\n            </Grid>\r\n            </p>\r\n  \r\n            <p>\r\n            <Grid container spacing = {1} justify=\"center\" direction=\"row\">\r\n            <Cell N={this.index()}></Cell>\r\n            <Cell N={this.index()}></Cell>\r\n            <Cell N={this.index()}></Cell> \r\n            <Grid item>\r\n            <Paper elevation={3}>\r\n              <Box padding={2} height={50} width = {50}>\r\n                <center>\r\n                <img src={cheese} height={70} width={70} vertical-align=\"middle\"></img>\r\n                </center>\r\n              </Box>\r\n            </Paper> \r\n            </Grid>\r\n            </Grid></p>\r\n            <div><center>\r\n              <Button onClick={this.handleClick} style={{margin: 15,  color: \"white\", background: \"#4CAF50\", padding: 8}}>\r\n              <b>Generate new maze</b></Button>\r\n              <Button onClick={this.findPaths} style={{margin: 15,  color: \"white\", background: \"#4CAF50\", padding: 8}}>\r\n              <b> Find Paths </b></Button>\r\n              <br></br>            \r\n              </center>\r\n            </div> \r\n          </Grid> \r\n        </span>      \r\n      );\r\n    }  \r\n}\r\n\r\nexport default Maze;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Maze from './Maze';\n\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\nconst element = <Maze></Maze>\nReactDOM.render(element, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}